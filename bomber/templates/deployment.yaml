apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
  name: assets
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: assets
      app.kubernetes.io/name: assets
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: assets
        app.kubernetes.io/name: assets
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: assets
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.assets.name }}:{{ .Values.image.repository.assets.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health.html
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: assets
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 128m
            memory: 128Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext: {}
      serviceAccountName: assets
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
  name: carts
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "80801"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: SPRING_PROFILES_ACTIVE
          value: dynamodb
        envFrom:
        - configMapRef:
            name: carts
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.cart.name }}:{{ .Values.image.repository.cart.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: carts
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: carts
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/team: database
  name: carts-dynamodb
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: dynamodb
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      labels:
        app.kubernetes.io/component: dynamodb
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
        app.kubernetes.io/team: database
    spec:
      containers:
      - image: "{{ .Values.image.registry }}/{{ .Values.image.repository.dynamodb.name }}:{{ .Values.image.repository.dynamodb.tag }}"
        imagePullPolicy: IfNotPresent
        name: dynamodb
        ports:
        - containerPort: 8000
          name: dynamodb
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
  name: catalog
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
    spec:
      containers:
      - env:
        - name: DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: catalog-db
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        - name: DB_READ_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: catalog-db
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              key: name
              name: catalog-db
        envFrom:
        - configMapRef:
            name: catalog
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.catalog.name }}:{{ .Values.image.repository.catalog.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: catalog
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          periodSeconds: 5
          successThreshold: 3
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 128m
            memory: 256Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: catalog
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/team: database
  name: catalog-mysql
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: mysql
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mysql
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
        app.kubernetes.io/team: database
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: name
              name: catalog-db
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.mysql.name }}:{{ .Values.image.repository.mysql.tag }}"
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
  name: checkout
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/name: checkout
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/name: checkout
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: checkout
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.checkout.name }}:{{ .Values.image.repository.checkout.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: checkout
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 128m
            memory: 256Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: checkout
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/team: database
  name: checkout-redis
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/name: checkout
  template:
    metadata:
      labels:
        app.kubernetes.io/component: redis
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/name: checkout
        app.kubernetes.io/team: database
    spec:
      containers:
      - image: "{{ .Values.image.registry }}/{{ .Values.image.repository.redis.name }}:{{ .Values.image.repository.redis.tag }}"
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
  name: orders
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: SPRING_DATASOURCE_WRITER_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: orders-db
        - name: SPRING_DATASOURCE_WRITER_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: SPRING_DATASOURCE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        - name: SPRING_DATASOURCE_READER_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: orders-db
        - name: SPRING_DATASOURCE_READER_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: SPRING_DATASOURCE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        envFrom:
        - configMapRef:
            name: orders
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.orders.name }}:{{ .Values.image.repository.orders.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: orders
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          periodSeconds: 5
          successThreshold: 3
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: orders
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-mysql
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: mysql
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mysql
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: name
              name: orders-db
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.mysql.name }}:{{ .Values.image.repository.mysql.tag }}"
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/instance: rabbitmq
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/component: rabbitmq
        app.kubernetes.io/instance: rabbitmq
        app.kubernetes.io/name: rabbitmq
    spec:
      containers:
      - image: "{{ .Values.image.registry }}/{{ .Values.image.repository.rabbitmq.name }}:{{ .Values.image.repository.rabbitmq.tag }}"
        imagePullPolicy: IfNotPresent
        name: rabbitmq
        ports:
        - containerPort: 5672
          name: amqp
          protocol: TCP
        - containerPort: 15672
          name: http
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
  name: ui
  namespace: stormer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: ui
      app.kubernetes.io/name: ui
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: ui
        app.kubernetes.io/name: ui
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        envFrom:
        - configMapRef:
            name: ui
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository.ui.name }}:{{ .Values.image.repository.ui.tag }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 20
        name: ui
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: ui
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
